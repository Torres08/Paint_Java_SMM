/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package paintbasico;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import sm.jltr.eventos.LienzoAdapter;
import sm.jltr.eventos.LienzoEvent;
import sm.jltr.graficos.Forma;
import static sm.jltr.graficos.Forma.ELIPSE;
import static sm.jltr.graficos.Forma.FANTASMA;
import static sm.jltr.graficos.Forma.LINEA;
import static sm.jltr.graficos.Forma.RECTANGULO;
import sm.jltr.graficos.MiForma;
import sm.jltr.iu.Lienzo;


class MiManejadorLienzo extends LienzoAdapter{
    @Override
    public void shapeAdded(LienzoEvent evt){
        System.out.println("Figura " + evt.getForma() + " añadida");
    }
}


/**
 * La clase VentanaPrincipal representa la ventana principal de la aplicación.
 * Extiende la clase javax.swing.JFrame para proporcionar una ventana de interfaz gráfica de usuario.
 * @author torres
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    
    
    BufferedImage imgFuente;
    
    
    MiManejadorLienzo manejador = new MiManejadorLienzo();
    
    // lienzo viene de vi.getLienzo2D()
    //lienzo. addLienzoListener(manejador);
     
    /**
    * Constructor de la clase VentanaPrincipal.
    * Inicializa y configura los componentes de la ventana.
    */
    public VentanaPrincipal() {
        initComponents();
        
        //botonContraste.setPaintLabels(true);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoFormas = new javax.swing.ButtonGroup();
        grupoColores = new javax.swing.ButtonGroup();
        jProgressBar1 = new javax.swing.JProgressBar();
        barraHerramientas = new javax.swing.JToolBar();
        botonNuevaImagen = new javax.swing.JButton();
        botonAbrirImagen = new javax.swing.JButton();
        botonGuardarImagen = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonOvalo = new javax.swing.JToggleButton();
        botonFantasma = new javax.swing.JToggleButton();
        botonMover = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        panelColor = new javax.swing.JPanel();
        botonColor = new javax.swing.JToggleButton();
        botonRellenar = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        botonAlisar = new javax.swing.JToggleButton();
        botonGrosor = new javax.swing.JSlider();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        botonVolcarImagen = new javax.swing.JButton();
        panelInferior = new javax.swing.JPanel();
        BarraEstado = new javax.swing.JLabel();
        barraHerramientasInferior = new javax.swing.JToolBar();
        Separator5 = new javax.swing.JPanel();
        imagenBrillo = new javax.swing.JLabel();
        botonBrillo = new javax.swing.JSlider();
        Separator1 = new javax.swing.JPanel();
        imagenContraste = new javax.swing.JLabel();
        botonContraste = new javax.swing.JSlider();
        Separator3 = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        Separator4 = new javax.swing.JPanel();
        ComboBoxFiltros = new javax.swing.JComboBox<>();
        Separator2 = new javax.swing.JPanel();
        imagenCometa = new javax.swing.JLabel();
        botonCometa = new javax.swing.JSlider();
        escritorio = new javax.swing.JDesktopPane();
        menuBarra = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuImagen = new javax.swing.JMenu();
        menuVolcado = new javax.swing.JMenuItem();
        menuSeparadorImagen1 = new javax.swing.JPopupMenu.Separator();
        menuRescaleOp = new javax.swing.JMenuItem();
        menuConvolveOp = new javax.swing.JMenuItem();
        menuCometa = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraHerramientas.setRollover(true);

        botonNuevaImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevaImagen.setFocusable(false);
        botonNuevaImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevaImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevaImagen.addActionListener(formListener);
        barraHerramientas.add(botonNuevaImagen);

        botonAbrirImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrirImagen.setFocusable(false);
        botonAbrirImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrirImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrirImagen.addActionListener(formListener);
        barraHerramientas.add(botonAbrirImagen);

        botonGuardarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardarImagen.setFocusable(false);
        botonGuardarImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardarImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardarImagen.addActionListener(formListener);
        barraHerramientas.add(botonGuardarImagen);
        barraHerramientas.add(jSeparator2);

        grupoFormas.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(formListener);
        barraHerramientas.add(botonLinea);

        grupoFormas.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(formListener);
        barraHerramientas.add(botonRectangulo);

        grupoFormas.add(botonOvalo);
        botonOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonOvalo.setFocusable(false);
        botonOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOvalo.addActionListener(formListener);
        barraHerramientas.add(botonOvalo);

        grupoFormas.add(botonFantasma);
        botonFantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fantasma.png"))); // NOI18N
        botonFantasma.setFocusable(false);
        botonFantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonFantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonFantasma.addActionListener(formListener);
        barraHerramientas.add(botonFantasma);

        grupoFormas.add(botonMover);
        botonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        botonMover.setFocusable(false);
        botonMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonMover.addActionListener(formListener);
        barraHerramientas.add(botonMover);
        barraHerramientas.add(jSeparator1);

        panelColor.setMaximumSize(new java.awt.Dimension(30, 30));
        panelColor.setMinimumSize(new java.awt.Dimension(30, 30));
        panelColor.setPreferredSize(new java.awt.Dimension(30, 30));

        botonColor.setBackground(new java.awt.Color(0, 0, 0));
        grupoColores.add(botonColor);
        botonColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonColor.setMaximumSize(new java.awt.Dimension(30, 30));
        botonColor.setMinimumSize(new java.awt.Dimension(30, 30));
        botonColor.setPreferredSize(new java.awt.Dimension(30, 30));
        botonColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonColor.addActionListener(formListener);

        javax.swing.GroupLayout panelColorLayout = new javax.swing.GroupLayout(panelColor);
        panelColor.setLayout(panelColorLayout);
        panelColorLayout.setHorizontalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelColorLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(botonColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        panelColorLayout.setVerticalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelColorLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(botonColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        barraHerramientas.add(panelColor);

        botonRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        botonRellenar.setFocusable(false);
        botonRellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRellenar.addActionListener(formListener);
        barraHerramientas.add(botonRellenar);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTransparencia.addActionListener(formListener);
        barraHerramientas.add(botonTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(formListener);
        barraHerramientas.add(botonAlisar);

        botonGrosor.setValue(1);
        botonGrosor.setMaximumSize(new java.awt.Dimension(50, 25));
        botonGrosor.setMinimumSize(new java.awt.Dimension(50, 25));
        botonGrosor.setPreferredSize(new java.awt.Dimension(50, 25));
        botonGrosor.addChangeListener(formListener);
        barraHerramientas.add(botonGrosor);
        barraHerramientas.add(jSeparator3);

        botonVolcarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/volcado.png"))); // NOI18N
        botonVolcarImagen.setFocusable(false);
        botonVolcarImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonVolcarImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonVolcarImagen.addActionListener(formListener);
        barraHerramientas.add(botonVolcarImagen);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        panelInferior.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        panelInferior.setMinimumSize(new java.awt.Dimension(426, 46));
        panelInferior.setLayout(new java.awt.BorderLayout());

        BarraEstado.setText("Barra de estado");
        BarraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelInferior.add(BarraEstado, java.awt.BorderLayout.CENTER);

        barraHerramientasInferior.setRollover(true);
        barraHerramientasInferior.setPreferredSize(new java.awt.Dimension(379, 39));

        Separator5.setMaximumSize(new java.awt.Dimension(10, 0));
        Separator5.setMinimumSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout Separator5Layout = new javax.swing.GroupLayout(Separator5);
        Separator5.setLayout(Separator5Layout);
        Separator5Layout.setHorizontalGroup(
            Separator5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        Separator5Layout.setVerticalGroup(
            Separator5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        barraHerramientasInferior.add(Separator5);

        imagenBrillo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imagenBrillo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brillo.png"))); // NOI18N
        imagenBrillo.setAlignmentX(10.0F);
        imagenBrillo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraHerramientasInferior.add(imagenBrillo);

        botonBrillo.setMaximum(255);
        botonBrillo.setMinimum(-255);
        botonBrillo.setValue(0);
        botonBrillo.setMaximumSize(new java.awt.Dimension(50, 30));
        botonBrillo.setMinimumSize(new java.awt.Dimension(50, 30));
        botonBrillo.setPreferredSize(new java.awt.Dimension(50, 30));
        botonBrillo.addChangeListener(formListener);
        botonBrillo.addFocusListener(formListener);
        barraHerramientasInferior.add(botonBrillo);

        Separator1.setMaximumSize(new java.awt.Dimension(10, 1));
        Separator1.setMinimumSize(new java.awt.Dimension(10, 0));
        Separator1.setPreferredSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout Separator1Layout = new javax.swing.GroupLayout(Separator1);
        Separator1.setLayout(Separator1Layout);
        Separator1Layout.setHorizontalGroup(
            Separator1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        Separator1Layout.setVerticalGroup(
            Separator1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        barraHerramientasInferior.add(Separator1);

        imagenContraste.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imagenContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        imagenContraste.setAlignmentX(10.0F);
        imagenContraste.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraHerramientasInferior.add(imagenContraste);

        botonContraste.setMajorTickSpacing(1);
        botonContraste.setMaximum(20);
        botonContraste.setMinimum(1);
        botonContraste.setMinorTickSpacing(1);
        botonContraste.setValue(10);
        botonContraste.setMaximumSize(new java.awt.Dimension(50, 30));
        botonContraste.setMinimumSize(new java.awt.Dimension(50, 30));
        botonContraste.setPreferredSize(new java.awt.Dimension(50, 30));
        botonContraste.addChangeListener(formListener);
        botonContraste.addFocusListener(formListener);
        barraHerramientasInferior.add(botonContraste);

        Separator3.setMaximumSize(new java.awt.Dimension(10, 1));
        Separator3.setMinimumSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout Separator3Layout = new javax.swing.GroupLayout(Separator3);
        Separator3.setLayout(Separator3Layout);
        Separator3Layout.setHorizontalGroup(
            Separator3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        Separator3Layout.setVerticalGroup(
            Separator3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        barraHerramientasInferior.add(Separator3);

        jSeparator5.setMaximumSize(new java.awt.Dimension(30, 32767));
        jSeparator5.setMinimumSize(new java.awt.Dimension(15, 5));
        jSeparator5.setOpaque(true);
        jSeparator5.setPreferredSize(new java.awt.Dimension(7, 5));
        barraHerramientasInferior.add(jSeparator5);

        Separator4.setMaximumSize(new java.awt.Dimension(10, 1));
        Separator4.setMinimumSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout Separator4Layout = new javax.swing.GroupLayout(Separator4);
        Separator4.setLayout(Separator4Layout);
        Separator4Layout.setHorizontalGroup(
            Separator4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        Separator4Layout.setVerticalGroup(
            Separator4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        barraHerramientasInferior.add(Separator4);

        ComboBoxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano", "Iluminado 3x3", "Iluminado 5x5" }));
        ComboBoxFiltros.setMaximumSize(new java.awt.Dimension(140, 39));
        ComboBoxFiltros.addActionListener(formListener);
        barraHerramientasInferior.add(ComboBoxFiltros);

        Separator2.setMaximumSize(new java.awt.Dimension(10, 0));
        Separator2.setMinimumSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout Separator2Layout = new javax.swing.GroupLayout(Separator2);
        Separator2.setLayout(Separator2Layout);
        Separator2Layout.setHorizontalGroup(
            Separator2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        Separator2Layout.setVerticalGroup(
            Separator2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        barraHerramientasInferior.add(Separator2);

        imagenCometa.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imagenCometa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cometa.png"))); // NOI18N
        imagenCometa.setAlignmentX(10.0F);
        imagenCometa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraHerramientasInferior.add(imagenCometa);

        botonCometa.setMajorTickSpacing(1);
        botonCometa.setMaximum(20);
        botonCometa.setMinimum(1);
        botonCometa.setValue(10);
        botonCometa.setMaximumSize(new java.awt.Dimension(50, 30));
        botonCometa.setMinimumSize(new java.awt.Dimension(50, 30));
        botonCometa.setPreferredSize(new java.awt.Dimension(50, 30));
        botonCometa.addChangeListener(formListener);
        botonCometa.addFocusListener(formListener);
        barraHerramientasInferior.add(botonCometa);

        panelInferior.add(barraHerramientasInferior, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        escritorio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 952, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 401, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(formListener);
        menuArchivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(formListener);
        menuArchivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(formListener);
        menuArchivo.add(menuGuardar);

        menuBarra.add(menuArchivo);

        menuImagen.setText("Imagen");

        menuVolcado.setText("Volcado");
        menuVolcado.addActionListener(formListener);
        menuImagen.add(menuVolcado);
        menuImagen.add(menuSeparadorImagen1);

        menuRescaleOp.setText("RescaleOp");
        menuRescaleOp.addActionListener(formListener);
        menuImagen.add(menuRescaleOp);

        menuConvolveOp.setText("ConvolveOp");
        menuConvolveOp.addActionListener(formListener);
        menuImagen.add(menuConvolveOp);

        menuCometa.setText("Cometa");
        menuCometa.addActionListener(formListener);
        menuImagen.add(menuCometa);

        menuBarra.add(menuImagen);

        setJMenuBar(menuBarra);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == botonNuevaImagen) {
                VentanaPrincipal.this.botonNuevaImagenActionPerformed(evt);
            }
            else if (evt.getSource() == botonAbrirImagen) {
                VentanaPrincipal.this.botonAbrirImagenActionPerformed(evt);
            }
            else if (evt.getSource() == botonGuardarImagen) {
                VentanaPrincipal.this.botonGuardarImagenActionPerformed(evt);
            }
            else if (evt.getSource() == botonLinea) {
                VentanaPrincipal.this.botonLineaActionPerformed(evt);
            }
            else if (evt.getSource() == botonRectangulo) {
                VentanaPrincipal.this.botonRectanguloActionPerformed(evt);
            }
            else if (evt.getSource() == botonOvalo) {
                VentanaPrincipal.this.botonOvaloActionPerformed(evt);
            }
            else if (evt.getSource() == botonFantasma) {
                VentanaPrincipal.this.botonFantasmaActionPerformed(evt);
            }
            else if (evt.getSource() == botonMover) {
                VentanaPrincipal.this.botonMoverActionPerformed(evt);
            }
            else if (evt.getSource() == botonColor) {
                VentanaPrincipal.this.botonColorActionPerformed(evt);
            }
            else if (evt.getSource() == botonRellenar) {
                VentanaPrincipal.this.botonRellenarActionPerformed(evt);
            }
            else if (evt.getSource() == botonTransparencia) {
                VentanaPrincipal.this.botonTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == botonAlisar) {
                VentanaPrincipal.this.botonAlisarActionPerformed(evt);
            }
            else if (evt.getSource() == botonVolcarImagen) {
                VentanaPrincipal.this.botonVolcarImagenActionPerformed(evt);
            }
            else if (evt.getSource() == ComboBoxFiltros) {
                VentanaPrincipal.this.ComboBoxFiltrosActionPerformed(evt);
            }
            else if (evt.getSource() == menuNuevo) {
                VentanaPrincipal.this.menuNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == menuAbrir) {
                VentanaPrincipal.this.menuAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == menuGuardar) {
                VentanaPrincipal.this.menuGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == menuVolcado) {
                VentanaPrincipal.this.menuVolcadoActionPerformed(evt);
            }
            else if (evt.getSource() == menuRescaleOp) {
                VentanaPrincipal.this.menuRescaleOpActionPerformed(evt);
            }
            else if (evt.getSource() == menuConvolveOp) {
                VentanaPrincipal.this.menuConvolveOpActionPerformed(evt);
            }
            else if (evt.getSource() == menuCometa) {
                VentanaPrincipal.this.menuCometaActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == botonBrillo) {
                VentanaPrincipal.this.botonBrilloFocusGained(evt);
            }
            else if (evt.getSource() == botonContraste) {
                VentanaPrincipal.this.botonContrasteFocusGained(evt);
            }
            else if (evt.getSource() == botonCometa) {
                VentanaPrincipal.this.botonCometaFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == botonBrillo) {
                VentanaPrincipal.this.botonBrilloFocusLost(evt);
            }
            else if (evt.getSource() == botonContraste) {
                VentanaPrincipal.this.botonContrasteFocusLost(evt);
            }
            else if (evt.getSource() == botonCometa) {
                VentanaPrincipal.this.botonCometaFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == botonGrosor) {
                VentanaPrincipal.this.botonGrosorStateChanged(evt);
            }
            else if (evt.getSource() == botonBrillo) {
                VentanaPrincipal.this.botonBrilloStateChanged(evt);
            }
            else if (evt.getSource() == botonContraste) {
                VentanaPrincipal.this.botonContrasteStateChanged(evt);
            }
            else if (evt.getSource() == botonCometa) {
                VentanaPrincipal.this.botonCometaStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Obtiene el lienzo seleccionado en la ventana interna actual del escritorio.
    *
    * @return El objeto Lienzo seleccionado, o null si no hay ninguna ventana interna seleccionada o no tiene un lienzo.
    */
    private Lienzo getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi!=null ? vi.getLienzo() : null;
    }
    
    /**
    * Deselecciona todas las figuras en el lienzo seleccionado, si está en modo seleccion.
    */
    private void deseleccionar(){
         Lienzo lienzo = getSelectedLienzo();
        
         System.out.println("Deseleccionar, Estado Lienzo Mover:" + lienzo.isMover());
         for(MiForma s: lienzo.getListaFiguras()) {
            if (lienzo.isMover()){
                if (s != null){
                    //System.out.println("Hola");
                    s.getAtributos().setSeleccionado(false);
                    lienzo.repaint(); // lienzo repaint
                }       
            }     
        }
    }
    
    
    /** 
     * Se realiza un volcado de las imagenes seleccionadas
    */
    private void menuVolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVolcadoActionPerformed
        /*
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        */
        this.botonVolcarImagenActionPerformed(evt);
    }//GEN-LAST:event_menuVolcadoActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona la opción de menú "Abrir".
    * Abre un diálogo de selección de archivos para elegir una imagen, y muestra la imagen seleccionada en una nueva ventana interna.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        String proyectoRuta = System.getProperty("user.dir");
        File proyectoDirectorio = new File(proyectoRuta);
        String directorioPadre = proyectoDirectorio.getParent();
        JFileChooser dlg = new JFileChooser(directorioPadre );
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
                
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo().setImagen(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex){
                System.err.println("Error al leer la imagen");
            }
           
        }
        System.out.println("Abrir Imagen");

    }//GEN-LAST:event_menuAbrirActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para dibujar líneas.
    * Desselecciona todas las figuras en el lienzo seleccionado y configura la forma de dibujo en el lienzo como una línea.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed

        Lienzo lienzo = getSelectedLienzo();
        deseleccionar();
        
        if (!botonMover.isSelected())
              lienzo.setMover(false);
        
        if(lienzo != null)
            lienzo.setForma(sm.jltr.graficos.Forma.LINEA);
        
        System.out.println("Forma Linea");
    }//GEN-LAST:event_botonLineaActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para dibujar rectángulos.
    * Deselecciona todas las figuras en el lienzo seleccionado y configura la forma de dibujo en el lienzo como un rectángulo.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
       Lienzo lienzo = getSelectedLienzo();
       deseleccionar();

       if (!botonMover.isSelected())
              lienzo.setMover(false);
       
       if(lienzo != null)
          lienzo.setForma(sm.jltr.graficos.Forma.RECTANGULO);
        
       System.out.println("Forma Rectangulo" );
    }//GEN-LAST:event_botonRectanguloActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para dibujar óvalos.
    * Deselecciona todas las figuras en el lienzo seleccionado y configura la forma de dibujo en el lienzo como una elipse.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonOvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOvaloActionPerformed
       Lienzo lienzo = getSelectedLienzo();
       deseleccionar();

       if (!botonMover.isSelected())
              lienzo.setMover(false);
              
       if(lienzo != null)
        lienzo.setForma(sm.jltr.graficos.Forma.ELIPSE);
       
       System.out.println("Forma Elipse");
    }//GEN-LAST:event_botonOvaloActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona la opción de menú "Guardar".
    * Permite al usuario guardar la imagen mostrada en la ventana interna seleccionada como un archivo JPG.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        String proyectoRuta = System.getProperty("user.dir");
        File proyectoDirectorio = new File(proyectoRuta);
        String directorioPadre = proyectoDirectorio.getParent();
        
        
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser(directorioPadre);
                
                dlg.setFileFilter(new FileNameExtensionFilter("Archivos PNG", "png"));
                dlg.setFileFilter(new FileNameExtensionFilter("Archivos JPEG", "jpg", "jpeg"));
                dlg.setFileFilter(new FileNameExtensionFilter("Archivos BMP", "bmp"));
                
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        
                        String extension = getFileExtension(f);
                        
                        if (!extension.isEmpty()) {
                            ImageIO.write(img, extension, f);
                            vi.setTitle(f.getName());
                        } else {
                            // PNG por defecto
                            ImageIO.write(img, "png", f);
                            vi.setTitle(f.getName() + ".png");
                        }
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
        System.out.println("Guardar Imagen");
    }//GEN-LAST:event_menuGuardarActionPerformed

    // obtener la extension de un archivo
    private String getFileExtension(File file) {
        String extension = "";
        String fileName = file.getName();
        int dotIndex = fileName.lastIndexOf('.');
            if (dotIndex > 0 && dotIndex < fileName.length() - 1) {
                extension = fileName.substring(dotIndex + 1).toLowerCase();
            }
        return extension;
    }
    
    /**
    * Maneja el evento de acción cuando se selecciona el botón para dibujar formas fantasma.
    * Deselecciona todas las figuras en el lienzo seleccionado y configura la forma de dibujo en el lienzo como una forma fantasma.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonFantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFantasmaActionPerformed
        Lienzo lienzo = getSelectedLienzo();
        deseleccionar();

        if (!botonMover.isSelected())
            lienzo.setMover(false);
            
         
        if(lienzo != null)
            lienzo.setForma(sm.jltr.graficos.Forma.FANTASMA);
        
       System.out.println("Forma Fantasma");

    }//GEN-LAST:event_botonFantasmaActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para activar o desactivar el modo de mover figuras.
    * Cambia el estado del modo mover en el lienzo seleccionado y lo refleja en el botón de selección.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMoverActionPerformed
     
      Lienzo lienzo = getSelectedLienzo();
      if(lienzo != null){ 
                  
           lienzo.setMover(!lienzo.isMover());
           if (botonMover.isSelected()){
              lienzo.setMover(true); 
           } 
          
      }
      System.out.println("Mover");     
    }//GEN-LAST:event_botonMoverActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para elegir un color.
    * Abre un selector de color para que el usuario elija un color, y lo aplica a la forma seleccionada en el lienzo.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColorActionPerformed
         Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
  
         Lienzo lienzo = getSelectedLienzo();
         if(lienzo != null){
            lienzo.getAtributosActual().setColor(color);
        
            for (MiForma s: lienzo.getListaFiguras()){
                if (s != null && s.getAtributos().isSeleccionado()){
                    // actualizar las variables 
                    s.getAtributos().setColor(color);
                    this.repaint();
                }   
            }
            
         }
            
         System.out.println("Color " + color);
         botonColor.setBackground(color);
        
    }//GEN-LAST:event_botonColorActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para activar o desactivar el relleno de las figuras.
    * Cambia el estado del relleno en la forma seleccionada en el lienzo y lo refleja en todas las figuras seleccionadas.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenarActionPerformed
       
       Lienzo lienzo = getSelectedLienzo();
       
       if(lienzo != null){ 
            boolean RellenarActual = lienzo.getAtributosActual().getRelleno();
            lienzo.getAtributosActual().setRelleno(!RellenarActual);
            //System.out.println("Rellenar: " + lienzo.getAtributosActual().getRelleno() );
            
                for (MiForma s: lienzo.getListaFiguras()){
                     if (s != null && s.getAtributos().isSeleccionado()){
                         // actualizar las variables 
                         s.getAtributos().setRelleno(lienzo.getAtributosActual().getRelleno());
                         this.repaint();
                    }   
                }
       }   
       System.out.println("Rellenar ");
    }//GEN-LAST:event_botonRellenarActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para activar o desactivar la transparencia de las figuras.
    * Cambia el estado de la transparencia en la forma seleccionada en el lienzo y lo refleja en todas las figuras seleccionadas.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
       
       Lienzo lienzo = getSelectedLienzo();
       
       if(lienzo != null){
           
           lienzo.getAtributosActual().setTransparencia(!lienzo.getAtributosActual().isTransparencia());
           System.out.println("Transparencia: " + lienzo.getAtributosActual().isTransparencia() );
       
           for (MiForma s: lienzo.getListaFiguras()){
               if (s != null && s.getAtributos().isSeleccionado()){
                         // actualizar las variables 
                         s.getAtributos().setTransparencia(lienzo.getAtributosActual().isTransparencia());
                         this.repaint();
               } 
           }  
           
       }
        System.out.println("Transparencia");

    }//GEN-LAST:event_botonTransparenciaActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para activar o desactivar el alisado de las líneas.
    * Cambia el estado del alisado en la forma seleccionada en el lienzo y lo refleja en todas las figuras seleccionadas.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed

       Lienzo lienzo = getSelectedLienzo();
       if(lienzo != null){
           lienzo.getAtributosActual().setAlisado(!lienzo.getAtributosActual().isAlisado());
            System.out.println("Alisado: " + lienzo.getAtributosActual().isAlisado() );
       
            for (MiForma s: lienzo.getListaFiguras()){
               if (s != null && s.getAtributos().isSeleccionado()){
                         // actualizar las variables 
                         s.getAtributos().setAlisado(lienzo.getAtributosActual().isAlisado());
                         this.repaint();
               } 
           } 
       
       }
        System.out.println("Alisar");
 
    }//GEN-LAST:event_botonAlisarActionPerformed

    /**
    * Maneja el evento de cambio de estado cuando se ajusta el valor del grosor de la línea.
    * Actualiza el grosor de la línea en la forma seleccionada en el lienzo y lo refleja en todas las figuras seleccionadas.
    * Además, imprime un mensaje de depuración.
    *
    * @param evt El evento de cambio de estado que desencadenó este método.
    */
    private void botonGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonGrosorStateChanged
        Stroke st = new BasicStroke((Integer) this.botonGrosor.getValue());
       
       Lienzo lienzo = getSelectedLienzo();
       
       if(lienzo != null){
           lienzo.getAtributosActual().setStroke(st);
           
           for (MiForma s: lienzo.getListaFiguras()){
               if (s != null && s.getAtributos().isSeleccionado()){
                         // actualizar las variables 
                         s.getAtributos().setStroke(st);
                         this.repaint();
               } 
           } 
       } 
       System.out.println("Grosor");
    }//GEN-LAST:event_botonGrosorStateChanged

    /**
    * Maneja el evento de acción cuando se selecciona la opción de menú "Nuevo".
    * Crea una nueva ventana interna y la agrega al escritorio, luego inicializa una imagen en blanco con un borde negro discontinuo y la establece como imagen de fondo en el lienzo de la ventana interna.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        // Obtener la ventana interna seleccionada
        // El recortar no lo aplico bien, ver la practica 9 para tenerlo bien
        VentanaInterna vi = new VentanaInterna();
        
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        
        escritorio.add(vi);
        vi.setVisible(true);
        
        BufferedImage imagen;
        // Cambiar RBG a TYPE_INT_ARGB  
        //imagen = vi.getLienzo().getPaintedImage();
        imagen = new BufferedImage(vi.getWidth(), vi.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        Graphics2D g2d = imagen.createGraphics();

        // Rellenar la imagen con color blanco
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, imagen.getWidth(), imagen.getHeight());

        // Dibujar el borde negro discontinuo
        Stroke stroke = new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 0, new float[]{5, 5}, 0);
        g2d.setStroke(stroke);
        g2d.setColor(Color.BLACK);
        g2d.drawLine(0, imagen.getHeight() - 1, imagen.getWidth() - 1, imagen.getHeight() - 1); // Línea inferior
        g2d.drawLine(imagen.getWidth() - 1, 0, imagen.getWidth() - 1, imagen.getHeight() - 1); // Línea derecha // Línea izquierda
        
        //Establecer el área de recorte del lienzo para que coincida con el tamaño de la imagen
        //Graphics2D g2dLienzo = vi.getLienzo().getGraphics2D();
        //Graphics2D g2dLienzo = (Graphics2D) vi.getLienzo().getGraphics2D();
        //Rectangle clip = new Rectangle(0, 0, imagen.getWidth(), imagen.getHeight());        g2d.setClip(clip);
        //g2d.setClip(clip);

        vi.getLienzo().setImagen(imagen);
        System.out.println("Nueva Imagen");
    }//GEN-LAST:event_menuNuevoActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para crear una nueva imagen.
    * Llama al método de manejo de eventos correspondiente para la opción de menú "Nuevo".
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonNuevaImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaImagenActionPerformed
        this.menuNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonNuevaImagenActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para abrir una imagen.
    * Llama al método de manejo de eventos correspondiente para la opción de menú "Abrir".
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonAbrirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirImagenActionPerformed
        this.menuAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirImagenActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para guardar una imagen.
    * Llama al método de manejo de eventos correspondiente para la opción de menú "Guardar".
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonGuardarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarImagenActionPerformed
        this.menuGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarImagenActionPerformed

    /**
    * Maneja el evento de acción cuando se selecciona el botón para volcar una imagen sobre una forma seleccionada.
    * Obtiene la ventana interna seleccionada y busca formas seleccionadas en su lienzo. 
    * Luego, crea una nueva imagen del tamaño de la forma seleccionada, dibuja la forma sobre la imagen y la remueve del lienzo.
    * Finalmente, repinta la ventana interna para reflejar los cambios.
    *
    * @param evt El evento de acción que desencadenó este método.
    */
    private void botonVolcarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolcarImagenActionPerformed
    // Obtener la ventana interna seleccionada
    // solo borra, ver la practica 9 para tenerlo bien
    
    VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
    
    if (vi != null) {
        for (MiForma forma : vi.getLienzo().getListaFiguras()) {
            // i
            if (forma.getAtributos().isSeleccionado()) {
                /*
                Que es lo que quiero
                cada figura, que este seleccionada, obtener su bufferedImage
                hacer set.image de esa imagen
                */
             
                BufferedImage imgout = vi.getLienzo().getPaintedImageSeleccionada();
                
                //Graphics2D g2dImagen = imgout.createGraphics();
                
                //g2dImagen.paint(forma);
                vi.getLienzo().setImagen(imgout); // asi solo hago de una , quiero de todas seleccionadas, hace imagen del lienzo
                
                
            }
        }
        
        vi.repaint();
        
        System.out.println("Volcado Imagen");
        } 
        
    }//GEN-LAST:event_botonVolcarImagenActionPerformed

    private int valorSliderAnterior = 10; // el iniciado
    
    private void botonCometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonCometaStateChanged
        // TODO add your handling code here:
        System.out.println("Valor Cometa (0.1:2):" + (float) botonCometa.getValue() / 10.0f); 
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        
        if (vi != null){
            BufferedImage img = vi.getLienzo().getImagen();
            if (img != null){
                try{
                    
                    // Definir un filtro de emborronamiento horizontal
                   
                
                    float[] filtro;
                    
                    
                    float intensidad = botonCometa.getValue() / 10.0f;
                    
                    
                    filtro = new float[] {
                                0.05f * intensidad ,
                                0.1f * intensidad ,
                                0.2f * intensidad ,
                                0.3f * intensidad ,
                                0.2f * intensidad ,
                                0.1f * intensidad ,
                                0.05f * intensidad  
                    };
                    
                    //valorSliderAnterior = valorSliderActual;
    
                    for (int i = 0; i < filtro.length; i++) {
                       System.out.println("Valor mascara: " + filtro[i]);

                    }
                    
                    
                    // filtro es una matriz 3x3
                    //Kernel k = new Kernel(3, 3, filtro);
                    Kernel k = new Kernel(filtro.length, 1, filtro);
                    
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                    
                    
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
        
    }//GEN-LAST:event_botonCometaStateChanged

    private void botonBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        System.out.println("Valor Brillo (-255:255):" + botonBrillo.getValue());
        
        if (vi != null && imgFuente != null){
            // get value del slider te da el valor del slider
            try{   
                    RescaleOp rop = new RescaleOp(1.0F, this.botonBrillo.getValue(), null);
                    rop.filter(imgFuente, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();  
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

        }
    }//GEN-LAST:event_botonBrilloStateChanged

    private void botonContrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonContrasteStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        System.out.println("Valor Contraste: (0.1:2): " + (float) botonContraste.getValue()/10.0);
 
        if (vi != null && imgFuente  != null){
            // get value del slider te da el valor del slider
            try{   
                    RescaleOp rop = new RescaleOp((float) (this.botonContraste.getValue()/ 10.0), 0, null);
                    rop.filter(imgFuente , vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();  
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

        }
    }//GEN-LAST:event_botonContrasteStateChanged
    
    private void menuRescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            BufferedImage img = vi.getLienzo().getImagen();
            if (img != null){
                try{
                    // para brillo y contraste jugamos con a y b
                    // a = 1.0F
                    // b = 100.0F
                    // variando B vario la oscuridad
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo().repaint();
                    
                    // para convolve op  img != img, funete destino distinto por lo que hay que hacer el segundo metodo 
                    // segundo metodo 
                    //RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    //BufferedImage imgdest = rop.filter(img, null);
                    //vi.getLienzo().setImagen(imgdest);
                    //vi.getLienzo().repaint();
                    
                    
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_menuRescaleOpActionPerformed

    private void menuConvolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvolveOpActionPerformed
        // convolveOP puedo hacer muchas cosas
        // aplicar mascara suavizado(binomial), realce , fronteras(laplaciano) tienes que crear un filtro antes, una matriz
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            BufferedImage img = vi.getLienzo().getImagen();
            if (img != null){
                try{
                    
                    // filtro suavizado, 1/9, matrix 3x3 , 1/9
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f,0.1f, 0.1f, 0.1f};
                    
                    // filtro es una matriz 3x3
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                    
                    
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_menuConvolveOpActionPerformed

    private void botonBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonBrilloFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        // inicializo la bufferedImage
        if (vi != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);  
        }
            
    }//GEN-LAST:event_botonBrilloFocusGained

    private void botonBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonBrilloFocusLost
        imgFuente = null;
        this.botonBrillo.setValue(0);
        repaint();
    }//GEN-LAST:event_botonBrilloFocusLost

    private void botonContrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonContrasteFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        // inicializo la bufferedImage
        if (vi != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);  
        }
    }//GEN-LAST:event_botonContrasteFocusGained

    private void botonContrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonContrasteFocusLost
        imgFuente  = null;
        this.botonContraste.setValue(10);
        repaint();
    }//GEN-LAST:event_botonContrasteFocusLost

    private void ComboBoxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxFiltrosActionPerformed
        // TODO add your handling code here:
        
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            BufferedImage img = vi.getLienzo().getImagen();
            
            int seleccion = this.ComboBoxFiltros.getSelectedIndex();
            Kernel k = this.getKernel(seleccion);
            
            if (img != null && k != null){
                try{

                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                    
                    
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
        
    }//GEN-LAST:event_ComboBoxFiltrosActionPerformed

    private void botonCometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonCometaFocusLost
        imgFuente = null;
        this.botonCometa.setValue(10);
        repaint();
    }//GEN-LAST:event_botonCometaFocusLost

    private void botonCometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_botonCometaFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        // inicializo la bufferedImage
        if (vi != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);  
        }
           
    }//GEN-LAST:event_botonCometaFocusGained


    
    private void menuCometaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCometaActionPerformed

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null){
            BufferedImage img = vi.getLienzo().getImagen();
            if (img != null){
                try{
                    
                    // Definir un filtro de emborronamiento horizontal
                    /*
                     Este filtro da menos peso a los píxeles más alejados del píxel central, lo que simula el efecto degradado de la cola de un cometa.
                     matrix 1x7
                    */
                    /*
                   0.05f * intensidad ,
                                0.1f * intensidad ,
                                0.2f * intensidad ,
                                0.3f * intensidad ,
                                0.2f * intensidad ,
                                0.1f * intensidad ,
                                0.05f
                    */
                    //float[] filtro = {0.05f, 0.1f, 0.2f, 0.3f, 0.2f, 0.1f, 0.05f}; 
                    //float[] filtro = {0.0f, 0.0f, 0.0f, 0.3f, 0.2f, 0.1f, 0.05f}; 
                    //float[] filtro = {0.0f, 0.0f, 0.0f, 0.05f, 0.15f, 0.3f, 0.5f}; 
                    float[] filtro = {0.05f, 0.1f, 0.2f, 0.3f, 0.2f, 0.1f, 0.05f}; 

                    Kernel k = new Kernel(filtro.length, 1, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                    
                    
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
    }//GEN-LAST:event_menuCometaActionPerformed

    /*
        mascara iluminado que emborrona e ilumina la imagen ¿Por que?
            - matriz de convolucion de valor 0.2
            - cada pixel de la imagen se calcula como una combinacion lineal de los pixeles vecinos, donde los valores más
              cercanos tienen peso mayor
            - valores filtro iguales = valores se promedin con el de los vecinos = suavizado los bordes y detalles de la imagen, lo que emborrona
            - al ser valor positivo, suma de los pixeles vecinos = aumenta el brillo
    */
    private Kernel getKernel(int seleccion){
        Kernel k = null; 
        switch(seleccion){
                case 0 -> {
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                }
                case 1 -> {
                     k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                }
                case 2 -> {
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                }
                case 3 -> {
                   k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                }
                case 4 -> {
                  k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                }
                case 5 -> {
                   float[] filtro = {0.2f, 0.2f, 0.2f,
                                    0.2f, 0.2f, 0.2f, 
                                    0.2f, 0.2f, 0.2f}; 
                   k = new Kernel(3,3,filtro);
                }
                case 6 -> {
                    // suma total tiene que ser igual a la anterior = 1.0
                    /*
                    Solo aplica emborronamiento
                        float[] filtro = {
                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f,
                            0.04f, 0.04f, 0.04f, 0.04f, 0.04f
                        };
                    */
                    
                    // parecido es este, reduzco lla contribucion de pixeles en el centro
                    float[] filtro = {
                        0.02f, 0.04f, 0.06f, 0.04f, 0.02f,
                        0.04f, 0.08f, 0.10f, 0.08f, 0.04f,
                        0.06f, 0.10f, 0.12f, 0.10f, 0.06f,
                        0.04f, 0.08f, 0.10f, 0.08f, 0.04f,
                        0.02f, 0.04f, 0.06f, 0.04f, 0.02f
                    };

                    k = new Kernel(5,5,filtro);
                }
                
        }
         return k;
    }
    /**
    * Clase interna que maneja eventos relacionados con la activación de ventanas internas.
    */
    private class ManejadorVentanaInterna extends InternalFrameAdapter{
        // 1.Definir la clase manejadora y sobrecargar los metodos que sean necesarios
        // 2.crear el objeto manejador (hacer el new de la clase anterior)
        // 3.Enlazar el generador con el manejador  
        
        /**
        * Maneja el evento de activación de una ventana interna.
        * Actualiza los estados de los botones según los atributos y la forma actual del lienzo de la ventana interna activada.
        * 
        * @param evt El evento de activación de la ventana interna.
        */
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt){
             VentanaInterna vi = (VentanaInterna)evt.getInternalFrame();
             botonRellenar.setSelected(vi.getLienzo().getAtributosActual().getRelleno());
             botonAlisar.setSelected(vi.getLienzo().getAtributosActual().isAlisado());
             botonColor.setBackground(vi.getLienzo().getAtributosActual().getColor());
             
             Forma formaActual = vi.getLienzo().getForma();
             
             botonMover.setSelected(vi.getLienzo().isMover());
             
             if (! vi.getLienzo().isMover()) {
                switch(formaActual) {
                    case LINEA -> botonLinea.setSelected(true);
                    case RECTANGULO -> botonRectangulo.setSelected(true);
                    case ELIPSE -> botonOvalo.setSelected(true);
                    case FANTASMA -> botonFantasma.setSelected(true);
                    default -> {
                        botonLinea.setSelected(false);
                        botonRectangulo.setSelected(false);
                        botonOvalo.setSelected(false);
                        botonFantasma.setSelected(false);
                    }
                }
             }
             
                 
         }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JComboBox<String> ComboBoxFiltros;
    private javax.swing.JPanel Separator1;
    private javax.swing.JPanel Separator2;
    private javax.swing.JPanel Separator3;
    private javax.swing.JPanel Separator4;
    private javax.swing.JPanel Separator5;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JToolBar barraHerramientasInferior;
    private javax.swing.JButton botonAbrirImagen;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JSlider botonBrillo;
    private javax.swing.JToggleButton botonColor;
    private javax.swing.JSlider botonCometa;
    private javax.swing.JSlider botonContraste;
    private javax.swing.JToggleButton botonFantasma;
    private javax.swing.JSlider botonGrosor;
    private javax.swing.JButton botonGuardarImagen;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JToggleButton botonMover;
    private javax.swing.JButton botonNuevaImagen;
    private javax.swing.JToggleButton botonOvalo;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JToggleButton botonRellenar;
    private javax.swing.JToggleButton botonTransparencia;
    private javax.swing.JButton botonVolcarImagen;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.ButtonGroup grupoColores;
    private javax.swing.ButtonGroup grupoFormas;
    private javax.swing.JLabel imagenBrillo;
    private javax.swing.JLabel imagenCometa;
    private javax.swing.JLabel imagenContraste;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuBarra;
    private javax.swing.JMenuItem menuCometa;
    private javax.swing.JMenuItem menuConvolveOp;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenuItem menuRescaleOp;
    private javax.swing.JPopupMenu.Separator menuSeparadorImagen1;
    private javax.swing.JMenuItem menuVolcado;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelInferior;
    // End of variables declaration//GEN-END:variables
}
